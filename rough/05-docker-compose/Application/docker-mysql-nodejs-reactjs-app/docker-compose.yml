version: "3.8"

services:
  
  # 01 Database Server
  db: # Defines the 'db' service for MySQL database
    image: mysql:8.0 # Uses the MySQL 8.0 Docker image
    container_name: db
    environment: # Sets environment variables for the database configuration
      - MYSQL_USER=database # username
      - MYSQL_PASSWORD=pass123 # Sets the password for the MySQL user
      - MYSQL_DATABASE=appdb # Specifies the name of the database
      - MYSQL_ROOT_PASSWORD=pass123 # Sets the root password for MySQL
    ports:
      - 3307:3306 # Maps the container's port 3306 to the host's port 3307
    networks:
      - sameNetworkAsMysql # Connects the service to the 'sameNetworkAsMysql' network
    volumes:
      - db_data:/var/lib/mysql

  # 02 Backend Server 
  api: # Defines the 'api' service for the backend API
    depends_on:
      - db # Specifies that the 'api' service depends on the 'db' service
    environment:
      - DB_HOST=db
      - DB_USER=database
      - DB_PASSWORD=pass123
      - DB_NAME=appdb
      - DB_PORT=3306
    build: # Builds the backend API using the provided Dockerfile
      context: ./backend # Specifies the build context directory for the backend
      dockerfile: Dockerfile # Specifies the Dockerfile to use for building the backend
    restart: on-failure # Restarts the container if it fails  
    container_name: api  
    ports:
      - 5000:5000 # Maps the container's port 3000 to the host's port 3000
    networks:
      - sameNetworkAsMysql # Connects the service to the 'sameNetworkAsMysql' network

  # 03 Frontend Server
  frontend: # Defines the 'frontend' service for the frontend app
    depends_on:
      - api # Specifies that the 'frontend' service depends on the 'api' service
    build: # Builds the frontend app using the provided Dockerfile
      context: ./frontend # Specifies the build context directory for the frontend
    restart: on-failure # Restarts the container if it fails
    container_name: frontend  
    ports:
      - 3000:3000 # Maps the container's port 3000 to the host's port 3001
    networks:
      - sameNetworkAsMysql # Connects the service to the 'sameNetworkAsMysql' network

networks:
  sameNetworkAsMysql: # Defines the 'sameNetworkAsMysql' network
    driver: bridge # Specifies the network driver as 'bridge'

volumes:
  db_data: